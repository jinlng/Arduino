from machine import Pin
from time import sleep

class Keypad:
    """
    A class to represent a 4x4 keypad connected to an Arduino Nano ESP32.

    Attributes:
    - rows (list): A list of Pin objects representing the rows of the keypad.
    - cols (list): A list of Pin objects representing the columns of the keypad.
    - keys (list): A 2D list representing the keys on the keypad.
    """

    def __init__(self, row_pins: list, col_pins: list):
        """
        Constructs a new Keypad instance.

        Parameters:
        - row_pins (list): A list of integers representing the GPIO pins connected to the rows.
        - col_pins (list): A list of integers representing the GPIO pins connected to the columns.

        Raises:
        - ValueError: If the number of row pins or column pins is not equal to 4.
        """

        # Verifying that the number of row pins and column pins is 4.
        if len(row_pins) != 4 or len(col_pins) != 4:
            raise ValueError("The number of row pins and column pins should be 4.")

        # Initializing the rows and columns as Pin objects.
        self.rows = [Pin(pin, Pin.IN) for pin in row_pins]
        self.cols = [Pin(pin, Pin.OUT) for pin in col_pins]

        # Defining the 4x4 keypad layout.
        self.keys = [
            ['1', '2', '3', 'A'],
            ['4', '5', '6', 'B'],
            ['7', '8', '9', 'C'],
            ['*', '0', '#', 'D']
        ]

    def get_key(self):
        """
        Reads the keypad and returns the pressed key.

        Returns:
        str: The value of the pressed key.

        Raises:
        - ValueError: If no key is pressed.
        """

        # Scanning the keypad for a pressed key.
        for col in range(4):
            # Setting the current column as output and low.
            self.cols[col].value(0)

            # Checking the rows for a high value, indicating a pressed key.
            for row in range(4):
                if self.rows[row].value() == 1:
                    # Key pressed, return the corresponding value.
                    return self.keys[row][col]

            # Resetting the current column to high.
            self.cols[col].value(1)

        # No key pressed, raise an error.
        raise ValueError("No key pressed.")

# Example of using the Keypad class:

# Example 1: Initializing and reading the keypad
row_pins = [5, 6, 7, 8]
col_pins = [9, 10, 17, 18]
keypad = Keypad(row_pins, col_pins)

try:
    while True:
        key = keypad.get_key()
        print(f"Pressed key: {key}")
        sleep(0.1)
except ValueError as e:
    print(f"Error: {e}")